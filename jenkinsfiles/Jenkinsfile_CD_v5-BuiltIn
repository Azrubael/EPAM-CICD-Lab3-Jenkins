// Continuous Delivery pipeline.
// The part of the Continous Deployment pipeline.

pipeline {
  agent { label 'BuiltIn' }

  environment {
    DEPL_PORT='3000'
    ACCESS_PORT = ''
    IMAGE_TAG = ''
    CONTAINER_TAG = ''
    REMOTE_TAG = 'azrubael'
  }

  stages {
    stage('Set Environment Variables') {
      steps {
        script {
           if (env.GIT_BRANCH == 'main') {
             ACCESS_PORT = '3000'
             IMAGE_TAG = 'nodemain'
             CONTAINER_TAG = 'app-main-container'
           } else if (env.GIT_BRANCH == 'dev') {
             ACCESS_PORT = '3001'
             IMAGE_TAG = 'nodedev'
             CONTAINER_TAG = 'app-dev-container'
           } else {
             error("Unsupported branch: ${env.GIT_BRANCH}.")
           }
           LOCAL_IMG = "${IMAGE_TAG}:v1.0"
           REMOTE_IMG = "${REMOTE_TAG}/${IMAGE_TAG}:v1.0"
           echo "Status check >>> ACCESS_PORT = ${ACCESS_PORT}"
           echo "Status check >>> LOCAL_IMG = ${IMAGE_TAG}"
           echo "Status check >>> REMOTE_IMG = ${REMOTE_IMG}"
        }
      }
    }

    stage('Fetch Code') {
      steps {
        git url: 'https://github.com/Azrubael/EPAM-CICD-Lab3-Jenkins.git', \
        branch: env.GIT_BRANCH
      }
    }

    stage('Build Node.js project') {
      steps {
        sh '''
          npm install
          npm run build
        '''
      }
    }

    stage('Test Node.js project') {
      steps {
        sh 'npm test'
      }
    }

    stage('Manage Docker Containers and Images') {
      steps {
        script {        // Manage containers with special tags
          def containerId = sh(script: "sudo docker ps -q --filter ancestor=${LOCAL_IMG}", returnStdout: true).trim()
          if (containerId) {
            echo "Stopping and removing running container: ${containerId}"
            sh "sudo docker stop ${containerId}"
            sh "sudo docker rm ${containerId}"
          }

          def is_running = sh(script: "sudo docker ps --filter name=${CONTAINER_TAG} -q", returnStdout: true).trim()
          if (is_running) {
            echo "$is_running"
            sh "sudo docker stop ${CONTAINER_TAG}"
          }

          def is_container = sh(script: "sudo docker ps -a --filter name=${CONTAINER_TAG} -q", returnStdout: true).trim()
          if (is_container) {
            echo "Removing container: ${CONTAINER_TAG}"
            sh "sudo docker rm ${CONTAINER_TAG}"
          }

          def is_image = sh(script: "sudo docker images --filter reference=${LOCAL_IMG} -q", returnStdout: true).trim()
          if (is_image) {
            echo "Removing image: ${LOCAL_IMG}"
            sh "sudo docker rmi ${LOCAL_IMG}"
          }
        }
      }
    }

    stage('Docker Image Build') {
      steps {
        sh "sudo docker build -t ${LOCAL_IMG} ."
        sh "sudo docker tag ${LOCAL_IMG} ${REMOTE_IMG}"
      }
    }

    stage('Docker Image Push') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'dockerID', passwordVariable: 'DOCKERHUB_PASSWORD', usernameVariable: 'DOCKERHUB_USER')]) {
            sh """
            sudo docker login -u ${DOCKERHUB_USER} -p ${DOCKERHUB_PASSWORD}"
            sudo docker push ${REMOTE_IMG}
            """
        }
      }
    }


    // stage('Docker Container Run') {
    //   steps {
    //     sh """
    //       docker run -d \
    //       --restart unless-stopped \
    //       --name ${CONTAINER_TAG} \
    //       --publish ${ACCESS_PORT}:${DEPL_PORT} \
    //       ${LOCAL_IMG}
    //     """
    //   }
    // }
  }

  post {
    always {
      echo 'Pipeline execution completed.'
    }
    failure {
      echo 'Pipeline failed!'
    }
  }

}
